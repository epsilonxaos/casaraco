{
	"compilerOptions": {
		"allowImportingTsExtensions": true,
		"allowJs": true,
		"allowUnreachableCode": false, // pick up dead code paths
		// Strict Checks
		"alwaysStrict": true, // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
		"baseUrl": "./", // Lets you set a base directory to resolve non-absolute module names.
		// Module resolution
		"esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
		"isolatedModules": true,
		"jsx": "react-jsx",
		"module": "ESNext",
		// project options
		"moduleResolution": "node", // Pretty much always node for modern JS. Other option is "classic"
		"noEmit": true,
		// Linter Checks
		"noImplicitReturns": true,
		"noUncheckedIndexedAccess": true, // accessing index must always check for undefined
		"noUnusedLocals": true, // Report errors on unused local variables.
		"noUnusedParameters": true, // Report errors on unused parameters in functions
		"outDir": "lib", // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.,
		"removeComments": true, // Strips all comments from TypeScript files when converting into JavaScript- you rarely read compiled code so this saves space
		"resolveJsonModule": true,
		"sourceMap": true, // enables the use of source maps for debuggers and error reporting etc
		// Source Map
		"sourceRoot": "/resources", // Specify the location where a debugger should locate TypeScript files instead of relative source locations.
		"strictNullChecks": true, // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.
		"types": [
			"vite/client",
			"node"
		]
	}
}